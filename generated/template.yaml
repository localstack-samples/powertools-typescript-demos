Conditions:
  CDKMetadataAvailable:
    Fn::Or:
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - af-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ca-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - cn-north-1
      - Fn::Equals:
        - Ref: AWS::Region
        - cn-northwest-1
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-north-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-2
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-3
      - Fn::Equals:
        - Ref: AWS::Region
        - il-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - me-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - me-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - sa-east-1
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - us-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-east-2
      - Fn::Equals:
        - Ref: AWS::Region
        - us-west-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-west-2
Outputs:
  LoggerFunction:
    Value:
      Ref: loggerFunction1A496B16
  TracerFunction:
    Value:
      Ref: tracerFunction41CA717F
Parameters: {}
Resources:
  CDKMetadata:
    Condition: CDKMetadataAvailable
    Metadata:
      aws:cdk:path: PowerTools/CDKMetadata/Default
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/zWOOw6DMBAFz0JvNiGkCGVASplIcAC02AaZzzpi7VAg7h4ZRDXNm9G7QXLP4BrhwrFUQzyaBtbKoRwELlyvI06Nwpqs0j3De8fLk3TGkjA4wVraUYuipcBNcFojs3YMzwDBKeReDtrlyFocNShaOhubKDVbP0stdqFy2BnqQvDj3de7PX1OipYKS8ocZjgFPV9+yQOSDJKoZ2Pi2ZMzk4by4B/AABSc4QAAAA==
    Type: AWS::CDK::Metadata
  lambdaCreatorCustomResource:
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - lambdaCreatorFunction
        - Arn
    Type: Custom::MyCustomResource
  lambdaCreatorFunction:
    DependsOn:
    - testBucket
    Properties:
      Code:
        ZipFile: "import boto3, base64, urllib3, json\n\ndef handler(event, context):\n\
          \    zip_bytes_b64 = \"\"\
          \n    zip_bytes = base64.b64decode(zip_bytes_b64)\n    boto3.client(\"s3\"\
          ).put_object(Bucket=\"test\", Key=\"lambda.zip\", Body=zip_bytes)\n    send(event,\
          \ context, \"SUCCESS\", {})\n\ndef send(event, context, responseStatus,\
          \ responseData, physicalResourceId=None, noEcho=False, reason=None):\n \
          \   http = urllib3.PoolManager()\n    responseUrl = event['ResponseURL']\n\
          \    print(responseUrl)\n    responseBody = {\n        'Status' : responseStatus,\n\
          \        'Reason' : reason or \"See the details in CloudWatch Log Stream:\
          \ {}\".format(context.log_stream_name),\n        'PhysicalResourceId' :\
          \ physicalResourceId or context.log_stream_name,\n        'StackId' : event['StackId'],\n\
          \        'RequestId' : event['RequestId'],\n        'LogicalResourceId'\
          \ : event['LogicalResourceId'],\n        'NoEcho' : noEcho,\n        'Data'\
          \ : responseData\n    }\n    json_responseBody = json.dumps(responseBody)\n\
          \    response = http.request('PUT', responseUrl, body=json_responseBody)\n\
          \    print(\"Status code:\", response.status)\n"
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - lambdaCreatorFunctionRole
        - Arn
      Runtime: python3.9
      Timeout: 30
    Type: AWS::Lambda::Function
  lambdaCreatorFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  loggerFunction1A496B16:
    DependsOn:
    - loggerFunctionServiceRole6C003417
    - lambdaCreatorCustomResource
    Metadata:
      aws:asset:is-bundled: true
      aws:asset:path: asset.3a099217b2db5213dc14e303b9b7c3b4a37b943738c18efd2129c8fc260dedc5
      aws:asset:property: Code
      aws:cdk:path: PowerTools/loggerFunction/Resource
    Properties:
      Code:
        S3Bucket: test
        S3Key: lambda.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - loggerFunctionServiceRole6C003417
        - Arn
      Runtime: nodejs18.x
    Type: AWS::Lambda::Function
  loggerFunctionServiceRole6C003417:
    Metadata:
      aws:cdk:path: PowerTools/loggerFunction/ServiceRole/Resource
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Type: AWS::IAM::Role
  testBucket:
    Properties:
      BucketName: test
    Type: AWS::S3::Bucket
  tracerFunction41CA717F:
    DependsOn:
    - tracerFunctionServiceRoleCCF82246
    - lambdaCreatorCustomResource
    Metadata:
      aws:asset:is-bundled: true
      aws:asset:path: asset.7fed141899a321c741731e6fdd41a9bccb1f17e4781349af57d370842581e45d
      aws:asset:property: Code
      aws:cdk:path: PowerTools/tracerFunction/Resource
    Properties:
      Code:
        S3Bucket: test
        S3Key: lambda.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - tracerFunctionServiceRoleCCF82246
        - Arn
      Runtime: nodejs18.x
    Type: AWS::Lambda::Function
  tracerFunctionServiceRoleCCF82246:
    Metadata:
      aws:cdk:path: PowerTools/tracerFunction/ServiceRole/Resource
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Type: AWS::IAM::Role
Rules: {}
